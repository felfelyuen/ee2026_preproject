`timescale 1ns / 1ps

//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 09.03.2025 13:42:40
// Design Name: 
// Module Name: Top_Student
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
//      - Detects falling edge of `pb[0]` to increment `state`.
//      - Uses `oled_data` to display different patterns based on `state`.
//      - Includes clock dividers for various clock speeds.
// 
// Dependencies: 
//      - `variable_changer`
//      - `variable_clock`
//      - `flexible_clock_divider`
//      - `coord_system`
//      - `Oled_Display`
// 
//////////////////////////////////////////////////////////////////////////////////

module Top_Student (
    input [4:0] pb,        // Push buttons
    input basys_clock,     // Basys 3 Clock
    output [7:0] JB        // OLED display output
    );

    // OLED Display Variables
    reg [15:0] oled_data;
    wire fb, send_pix, sample_pix;
    wire [12:0] pixel_index;
    wire slow_clock;
    wire [6:0] x;
    wire [5:0] y;
    
    // State & Timing Variables
    reg [4:0] state = 0;
    wire fourtyfiveHz_clock;
    wire fifteenHz_clock;
    wire var_clock;
    
    // Moving Object Coordinates
    wire [6:0] var_x;
    wire [6:0] var_y;

    // Push Button Handling (Detecting Falling Edge)
    reg pb_last = 0; // Stores the previous state of pb[0]

    // Instantiate Modules
    variable_changer fa0 (.variable_clock(var_clock), .var_x(var_x), .var_y(var_y));
    variable_clock variableclk (.state(state), .fourtyfiveHz_clock(fourtyfiveHz_clock), .variable_clock(var_clock));
    coord_system convertor (.pixel_index(pixel_index), .x(x), .y(y));
    flexible_clock_divider slow_45Hz_clock (basys_clock, 555555, fourtyfiveHz_clock);
    flexible_clock_divider slow_15Hz_clock (basys_clock, 33333333, fifteenHz_clock);
    flexible_clock_divider slow_6p25MHz (basys_clock, 7, slow_clock);
    
    Oled_Display display(
        .clk(slow_clock), .reset(0), .frame_begin(fb), .sending_pixels(send_pix),
        .sample_pixel(sample_pix), .pixel_index(pixel_index), .pixel_data(oled_data), 
        .cs(JB[0]), .sdin(JB[1]), .sclk(JB[3]), .d_cn(JB[4]), .resn(JB[5]), 
        .vccen(JB[6]), .pmoden(JB[7])
    ); 
    
    
        // SINGLE always BLOCK for state + OLED logic
        always @ (posedge slow_clock) begin
            pb_last <= pb[4];
            if (pb_last == 1 && pb[4] == 0 && state == 0) begin
                state <= 5'b00010;  // Falling edge detected
            end
    
            //----------------------------------
            // 2) Main display logic
            //----------------------------------
            oled_data <= 16'b00000_000000_00000; // Default background (black)
            
            if (state == 0 || state == 5'b00001) begin
                if (x >= 7'd84 && y <= 6'd11) begin
                    oled_data <= 16'b11111_111111_00000; // Yellow square
                end
            end
            else if (state == 5'b00010) begin
                if (x >= 7'd84 && y <= var_y + 11) begin
                    oled_data <= 16'b11111_111111_00000;
                end
                if (var_y == 44) begin
                    state <= 5'b00011;
                end
            end
            else if (state == 5'b00011) begin
                if (x >= 7'd84 && y <= var_y + 11) begin
                    oled_data <= 16'b11111_111111_00000;
                end
                if (var_y == 6'd52) begin
                    state <= 5'b00100;
                end
            end
            else if (state == 5'b00100) begin
                if (x >= 7'd84) begin
                    oled_data <= 16'b11111_111111_00000;
                end
                if (x >= var_x && y >= 6'd52) begin
                    oled_data <= 16'b11111_111111_00000;
                end
                if (var_x == 7'd77) begin
                    state <= 5'b00101;
                end
            end
            else if (state == 5'b00101 || state == 5'b00110) begin
                if (var_x == 7'd55) begin
                    state <= 5'b00110;
                end
                else if (var_x == 7'd47) begin
                    state <= 5'b00111;
                end
                if (x >= 7'd84) begin
                    oled_data <= 16'b11111_111111_00000;
                end
                if (x >= var_x && y >= 6'd52) begin
                    oled_data <= 16'b11111_111111_00000;
                end
            end
            else if (state == 5'b00111 || state == 5'b01000 || state == 5'b01001) begin
                if (var_y == 6'd45) begin
                    state <= 5'b01000;
                end
                else if (var_y == 6'd39) begin
                    state <= 5'b01001;
                end
                else if (var_y == 6'd31) begin
                    state <= 5'b10000;
                end            
                if (x >= 7'd84) begin
                    oled_data <= 16'b11111_111111_00000;
                end
                if (x >= 7'd47 && y >= 6'd52) begin
                    oled_data <= 16'b11111_111111_00000;
                end
                if (x >= 7'd47 && x <= 7'd58 && y >= var_y) begin
                    oled_data <= 16'b11111_111111_00000;
                end
            end
            else if (state == 5'b10000) begin
                if (x >= 7'd84) begin
                    oled_data <= 16'b11111_111111_00000;
                end
                if (x >= 7'd47 && y >= 6'd52) begin
                    oled_data <= 16'b11111_111111_00000;
                end
                if (x >= 7'd47 && x <= 7'd58 && y >= 6'd31) begin
                    oled_data <= 16'b11111_111111_00000;
                end
                if (x>= 7'd47 && x <= 7'd81 && y >= 6'd31 && y <= 6'd42) begin
                    oled_data <= 16'b11111_111111_00000;
                end
                if (x >= 7'd70 && x <= 7'd81 && y <= 6'd42 && y >= 0) begin
                    oled_data <= 16'b11111_111111_00000;
                end
                if (x >= 7'd70 && x <= var_x + 11 && y <= 6'd10) begin
                    oled_data <= 16'b11111_111111_00000;
                end
                if (var_x == 7'd84) begin
                    state <= 5'b10001;
                end
            end
            else if (state == 5'b10001) begin
                state <= 0; // Reset state
            end
        end
    
    endmodule
/**
    // Detect Falling Edge of pb[0]
    always @ (posedge slow_clock) begin
        if (pb_last == 1 && pb[0] == 0 && state == 0) begin  // Falling edge detected (1 â†’ 0)
            state <= 5'b00010;
        end
        pb_last <= pb[0];  // Update last pb[0] state
    end

    // OLED Display Logic (State-Based Graphics)
    always @ (posedge slow_clock) begin
        oled_data <= 16'b00000_000000_00000; // Default background (black)
        
        if (state == 0 || state == 5'b00001) begin
            if (x >= 7'd84 && y <= 6'd11) begin
                oled_data <= 16'b11111_111111_00000; // Yellow square
            end
        end
        else if (state == 5'b00010) begin
            if (x >= 7'd84 && y <= var_y + 11) begin
                oled_data <= 16'b11111_111111_00000;
            end
            if (var_y == 44) begin
                state <= 5'b00011;
            end
        end
        else if (state == 5'b00011) begin
            if (x >= 7'd84 && y <= var_y + 11) begin
                oled_data <= 16'b11111_111111_00000;
            end
            if (var_y == 6'd52) begin
                state <= 5'b00100;
            end
        end
        else if (state == 5'b00100) begin
            if (x >= 7'd84) begin
                oled_data <= 16'b11111_111111_00000;
            end
            if (x >= var_x && y >= 6'd52) begin
                oled_data <= 16'b11111_111111_00000;
            end
            if (var_x == 7'd77) begin
                state <= 5'b00101;
            end
        end
        else if (state == 5'b00101 || state == 5'b00110) begin
            if (var_x == 7'd55) begin
                state <= 5'b00110;
            end
            else if (var_x == 7'd47) begin
                state <= 5'b00111;
            end
            if (x >= 7'd84) begin
                oled_data <= 16'b11111_111111_00000;
            end
            if (x >= var_x && y >= 6'd52) begin
                oled_data <= 16'b11111_111111_00000;
            end
        end
        else if (state == 5'b00111 || state == 5'b01000 || state == 5'b01001) begin
            if (var_y == 6'd45) begin
                state <= 5'b01000;
            end
            else if (var_y == 6'd39) begin
                state <= 5'b01001;
            end
            else if (var_y == 6'd31) begin
                state <= 5'b10000;
            end            
            if (x >= 7'd84) begin
                oled_data <= 16'b11111_111111_00000;
            end
            if (x >= 7'd47 && y >= 6'd52) begin
                oled_data <= 16'b11111_111111_00000;
            end
            if (x >= 7'd47 && x <= 7'd58 && y >= var_y) begin
                oled_data <= 16'b11111_111111_00000;
            end
        end
        else if (state == 5'b10000) begin
            if (x >= 7'd84) begin
                oled_data <= 16'b11111_111111_00000;
            end
            if (x >= 7'd47 && y >= 6'd52) begin
                oled_data <= 16'b11111_111111_00000;
            end
            if (x >= 7'd47 && x <= 7'd58 && y >= 6'd31) begin
                oled_data <= 16'b11111_111111_00000;
            end
            if (x>= 7'd47 && x <= 7'd81 && y >= 6'd31 && y <= 6'd42) begin
                oled_data <= 16'b11111_111111_00000;
            end
            if (x >= 7'd70 && x <= 7'd81 && y <= 6'd42 && y >= 0) begin
                oled_data <= 16'b11111_111111_00000;
            end
            if (x >= 7'd70 && x <= var_x + 11 && y <= 6'd10) begin
                oled_data <= 16'b11111_111111_00000;
            end
            if (var_x == 7'd84) begin
                state <= 5'b10001;
            end
        end
        else if (state == 5'b10001) begin
            state <= 0; // Reset state
        end
    end

endmodule
*/
